#!/usr/bin/env node
/*Module dependencies.*/

var app = require('../app');
var debug = require('debug')('moviescrud:server');
var http = require('http');
const mongoose = require('mongoose')
require('dotenv').config()

/*Get port from environment and store in Express.*/

var port = process.env.PORT;
app.set('port', port);

/*Create HTTP server.*/

var server = http.createServer(app);

/*Listen on provided port, on all network interfaces.*/

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/* Mongoose Setting */
mongoose.connect(
  `mongodb+srv://${process.env.DB_USER}:${process.env.DB_KEY}@${process.env.DB_HOST}`,
  { useNewUrlParser: true, useUnifiedTopology: true },
  (err) => {
    if (err) console.log("There is an error: ", err);
    console.log("Connected with Mongoose");
  }
);

/*Event listener for HTTP server "error" event.*/

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/*Event listener for HTTP server "listening" event.*/

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
